<?xml version="1.0" encoding="UTF-8"?>
<web-app id="PAW" version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
	<display-name>PAW test application</display-name>
	<!-- Configure ContextLoaderListener to use AnnotationConfigWebApplicationContext
	instead of the default XmlWebApplicationContext -->
	<context-param>
		<param-name>contextClass</param-name>
		<param-value>
			org.springframework.web.context.support.AnnotationConfigWebApplicationContext
		</param-value>
	</context-param>
	<!-- Configuration locations must consist of one or more comma- or space-delimited
	fully-qualified @Configuration classes. Fully-qualified packages may also
	be specified for component-scanning -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			ar.edu.itba.paw.webapp.config.WebConfig,
			ar.edu.itba.paw.webapp.config.WebAuthConfig,
		</param-value>
	</context-param>
	<!-- Bootstrap the root application context as usual using ContextLoaderListener -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextClass</param-name>
			<param-value>
				org.springframework.web.context.support.AnnotationConfigWebApplicationContext
			</param-value>
		</init-param>
		<init-param>
			<param-name>throwExceptionIfNoHandlerFound</param-name>
			<param-value>true</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>/resources/*</url-pattern>
	</servlet-mapping>
	<!--SECURITY FILTER-->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>charsetFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>charsetFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>openEntityManagerInViewFilter</filter-name>
		<filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>openEntityManagerInViewFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<error-page>
		<!--Missing login-->
		<error-code>401</error-code>
		<location>/WEB-INF/jsp/error/401.jsp</location>
	</error-page>
	<error-page>
		<!--Forbidden directory listing-->
		<error-code>403</error-code>
		<location>/WEB-INF/jsp/error/403.jsp</location>
	</error-page>
	<!--<error-page> Lo comento por que ahora que hicimos el exception controller y que agregamos ThrowException de no handler found queremos que el 404 lo trate de ese modo.

		<error-code>404</error-code>
		<location>/WEB-INF/jsp/error/404.jsp</location>
	</error-page>-->
	<!-- Uncaught exception -->
	<!-- Unsupported servlet method -->
	<!--
	<error-page>
        <error-code>500</error-code>
        <location>/WEB-INF/jsp/error/500.jsp</location>
    </error-page>
    <error-page>
        <error-code>503</error-code>
        <location>/WEB-INF/jsp/error/500.jsp</location>
    </error-page>
    -->

</web-app>
